generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Model {
  id         String   @id @default(cuid())
  name       String
  modelId    String
  baseUrl    String
  apiKey     String
  createdAt  DateTime @default(now())
  
  evals      Eval[]
  results    Result[]
  judgments  Judgment[]
}

model Eval {
  id             String   @id @default(cuid())
  questionText   String
  creatorModelId String
  tags           String?
  difficulty     String?
  metadata       Json?    @default("{}")
  createdAt      DateTime @default(now())

  creatorModel   Model    @relation(fields: [creatorModelId], references: [id])
  results        Result[]
  judgments      Judgment[]
}

model Result {
  id           String   @id @default(cuid())
  evalId       String
  modelId      String
  responseText String?
  errorLog     String?
  createdAt    DateTime @default(now())

  eval         Eval     @relation(fields: [evalId], references: [id])
  model        Model    @relation(fields: [modelId], references: [id])
}

model Judgment {
  id               String   @id @default(cuid())
  evalId           String
  judgeModelId     String
  score            Float
  justificationText String
  createdAt        DateTime @default(now())

  eval             Eval     @relation(fields: [evalId], references: [id])
  judgeModel       Model    @relation(fields: [judgeModelId], references: [id])
}
