generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
  schemas  = ["public", "auth"]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  login          String?
  role           UserRole  @default(user)
  isAdmin        Boolean   @default(false)
  accounts       Account[]
  sessions       Session[]

  @@schema("public")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@schema("public")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("public")
}

enum UserRole {
  user
  admin

  @@schema("public")
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())

  @@schema("public")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@schema("public")
}

model Model {
  id         String    @id @default(cuid())
  name       String
  baseUrl    String
  apiKey     String
  createdAt  DateTime  @default(now())
  Evals      Eval[]
  Results    Result[]
  Judgments  Judgment[] @relation("JudgeModel")

  @@schema("public")
}

model Eval {
  id              String    @id @default(cuid())
  questionText    String
  creatorModelId  String
  tags            String?
  difficulty      Int?
  createdAt       DateTime  @default(now())
  creatorModel    Model     @relation(fields: [creatorModelId], references: [id])
  Results         Result[]
  Judgments       Judgment[]

  @@schema("public")
}

model Result {
  id           String   @id @default(cuid())
  evalId       String
  modelId      String
  responseText String?
  errorLog     String?
  timestamp    DateTime @default(now())
  Eval         Eval     @relation(fields: [evalId], references: [id])
  Model        Model    @relation(fields: [modelId], references: [id])

  @@schema("public")
}

model Judgment {
  id               String   @id @default(cuid())
  evalId           String
  judgeModelId     String
  score            Float
  justificationText String?
  timestamp        DateTime @default(now())
  Eval             Eval     @relation(fields: [evalId], references: [id])
  judgeModel       Model    @relation("JudgeModel", fields: [judgeModelId], references: [id])

  @@schema("public")
}
